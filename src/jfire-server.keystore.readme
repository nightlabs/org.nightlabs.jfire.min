Currently, the jfire-server.keystore is used by the project JFireIntegrationJBoss in order to provide SSL-secured web 
access for remote method invocation and servlet access (=> Tomcat).
The file here is copied by the ServerConfigurator into the current working directory (if it does
not yet exist).

The jfire-server.keystore must contain exactly one certificate (we didn't find out how to address
a certain one, if there are multiple - contact us if you know it!).

# Originally, the 10 year long valid certificate was created via:
# keytool -genkey -keyalg RSA -keysize 1024 -alias localhost -validity 3650 -keystore jfire-server.keystore -storepass nightlabs -keypass nightlabs -dname "CN=localhost, OU=NightLabs Development, O=NightLabs, L=Freiburg, ST=Baden-WÃ¼rttemberg, C=DE"

Attention:
============
Don't use keytool to create a keystore and a private certificate, because it is difficult to extract
the private key from the keystore (not possible via keytool) and second since keytool cannot add
X509 extensions that are necessary to stop java from complaining (CertificateException : No subject
alternative names present)!

  Requirement
===============
In order to use the following openssl command, make sure to have a reasonably sized file named ".rnd"
containing random data that will be used to generate the private key in your "src" directory!

  Generating a new private key and the public certificate
===========================================================
This generates a new private key (rsa, 1024bit) + a public certificate for localhost containing the
subjectAltNames="IP:127.0.0.1,DNS:localhost" so java shouldn't complain about a subject mismatch!

 openssl req -newkey rsa:1024 -x509 -outform DER -out localhost_cer.der -days 3650 -config localhost_cer.cnf  
  -outform => use DER as output format -- we need that cert later in this form to import it into th
 						 JKS keystore using ImportKey

To check the created certificate enter: openssl x509 -inform DER -in localhost_cer.der -text

Import the private key into a keystore file following: http://www.agentbob.info/agentbob/79-AB.html
or http://conshell.net/wiki/index.php/OpenSSL_to_Keytool_Conversion_tips

Therefore we first have to translate the key into the DER format using:
 openssl pkcs8 -topk8 -nocrypt -in localhost_cer_key.pem -inform PEM -out localhost_cer_key.der -outform DER
 
Then we can use the utility pointed to from the agenbob.info site:
 java -Dkeystore=jfire-server.keystore ImportKey localhost_cer_key.der localhost_cer.der localhost

-> This call creates a new keystore named jfire-server.keystore importing the private key and the
	certificate. The keystore password as well as the private key password is now "importkey"!
	
Change the keystore's password as well as the private key's password:
 keytool -keystore jfire-server.keystore -alias localhost -storepass importkey -keypasswd -keypass importkey -new nightlabs
 keytool -keystore jfire-server.keystore -alias localhost -storepass importkey -storepasswd -new nightlabs

Now to export the public cert type:
 keytool -keystore jfire-server.keystore -alias localhost -storepass nightlabs -exportcert -file jfire-server-public.crt
 
And to import the public certificate into the client's truststore do:
 keytool -importcert -file jfire-server-public.crt -alias localhost -keystore jfire-server.truststore -storepass nightlabs

To check the contents of the server's keystore:
 keytool -list -keystore jfire-server.keystore -storepass nightlabs -v


