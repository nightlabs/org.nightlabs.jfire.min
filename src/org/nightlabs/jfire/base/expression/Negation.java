package org.nightlabs.jfire.base.expression;

import org.nightlabs.jfire.idgenerator.IDGenerator;

import javax.jdo.annotations.PrimaryKey;
import javax.jdo.annotations.FetchGroup;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.Column;
import org.nightlabs.jfire.base.expression.id.NegationID;
import javax.jdo.annotations.FetchGroups;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.PersistenceModifier;


/**
 * Instances of this class represent a logical negation of an expression.
 *
 * @author Tobias Langner <!-- tobias[dot]langner[at]nightlabs[dot]de -->
 *
 *
 * @jdo.persistence-capable
 * 		identity-type="application"
 *    detachable="true"
 *    objectid-class="org.nightlabs.jfire.base.expression.id.NegationID"
 *    table="JFireBase_Negation"
 *
 * @jdo.create-objectid-class
 *
 * @jdo.fetch-group
 * 		name="IExpression.fullData"
 * 		fetch-groups="default"
 * 		fields="expression[-1]"
 *
 * @jdo.fetch-group
 * 		name="IStruct.fullData"
 * 		fetch-groups="default"
 * 		fields="expression[-1]"
 * TODO check fetch-groups (what are necessary, what are not)! I (Marco) just had an exception without the above fetch-group "IStruct.fullData"! See class Composition.
 */
@PersistenceCapable(
	objectIdClass=NegationID.class,
	identityType=IdentityType.APPLICATION,
	detachable="true",
	table="JFireBase_Negation")
@FetchGroups({
	@FetchGroup(
		fetchGroups={"default"},
		name="IExpression.fullData",
		members=@Persistent(
			name="expression",
			recursionDepth=-1)),
	@FetchGroup(
		fetchGroups={"default"},
		name="IStruct.fullData",
		members=@Persistent(
			name="expression",
			recursionDepth=-1))
})
public class Negation implements IExpression
{
	private static final long serialVersionUID = 1L;

	/**
	 * @jdo.field primary-key="true"
	 * @jdo.column length="100"
	 */
	@PrimaryKey
	@Column(length=100)
	private String organisationID;

	/**
	 * @jdo.field primary-key="true"
	 */
	@PrimaryKey
	private long negationID;

	/**
	 * @jdo.field persistence-modifier="persistent"
	 */
	@Persistent(persistenceModifier=PersistenceModifier.PERSISTENT)
	private IExpression expression;

	/**
	 * @deprecated Only for JDO.
	 */
	@Deprecated
	protected Negation() {
	}

	/**
	 * Creates a new negation of the given expression with autogenerated primary key.
	 *
	 * @param expression The expression to be negated.
	 */
	public Negation(IExpression expression) {
		this (IDGenerator.getOrganisationID(), IDGenerator.nextID(Negation.class), expression);
	}

	/**
	 * Creates a new negation of the given expression with the given primary key.
	 *
	 * @param organisationID The organisationID of the new expression.
	 * @param negationID The ID of the negation.
	 * @param expression The expression to be negated.
	 */
	public Negation(String organisationID, long negationID, IExpression expression) {
		assert expression != null : "expression != null";
		this.expression = expression;
		this.organisationID = organisationID;
		this.negationID = negationID;
	}

	@Override
	public boolean evaluate(IEvaluationContext context) {
		return ! expression.evaluate(context);
	}

	@Override
	public String toString() {
		return toString("", "");
	}

	@Override
	public String toString(String indent, String indentChar) {
		return indent + "( NOT " + expression.toString(indent, indentChar) + " )";
	}

	public long getNegationID() {
		return negationID;
	}

	public String getOrganisationID() {
		return organisationID;
	}
	
	public IExpression getExpression() {
		return expression;
	}
}
