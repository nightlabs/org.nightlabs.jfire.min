<?xml version="1.0" encoding="UTF-8"?>
<datasources>
	<no-tx-datasource>
		<jndi-name>${datasourceJNDIName_relative_noTx}</jndi-name>
		<connection-url><![CDATA[${databaseURL}]]></connection-url>
		<driver-class>${databaseDriverName_noTx}</driver-class>

		<user-name>${databaseUserName}</user-name>
		<password><![CDATA[${databasePassword}]]></password>

		<connection-property name="autoReconnect">false</connection-property>
		<connection-property name="auto-commit">false</connection-property>

		<!-- sql to call when connection is created
		<new-connection-sql>some arbitrary sql</new-connection-sql>
		-->
		<!-- sql to call on an existing pooled connection when it is obtained from pool -->
		<check-valid-connection-sql>SELECT 1 AS testfield</check-valid-connection-sql>

		<metadata>
			<type-mapping>${datasourceMetadataTypeMapping}</type-mapping>
		</metadata>
		<max-pool-size>200</max-pool-size>
		<!--
		See the notes in the db-mysql-ds.template.xml. Automatically releasing
		idle connections pretty soon seems like a safe strategy and shouldn't
		cost much performance. In some situations (=> saving memory), it might
		even improve performance.
		-->
		<min-pool-size>0</min-pool-size>
		<idle-timeout-minutes>1</idle-timeout-minutes>
	</no-tx-datasource>

	<local-tx-datasource>
		<jndi-name>${datasourceJNDIName_relative_localTx}</jndi-name>
		<connection-url>${databaseURL}</connection-url>
		<driver-class>${databaseDriverName_localTx}</driver-class>

		<user-name>${databaseUserName}</user-name>
		<password>${databasePassword}</password>

		<connection-property name="autoReconnect">false</connection-property>
		<connection-property name="auto-commit">false</connection-property>

		<!-- sql to call when connection is created
		<new-connection-sql>some arbitrary sql</new-connection-sql>
		-->
		<!-- sql to call on an existing pooled connection when it is obtained from pool -->
		<check-valid-connection-sql>SELECT 1 AS testfield</check-valid-connection-sql>

		<metadata>
			<type-mapping>${datasourceMetadataTypeMapping}</type-mapping>
		</metadata>
		<max-pool-size>200</max-pool-size>
		<min-pool-size>0</min-pool-size>
		<idle-timeout-minutes>1</idle-timeout-minutes>
	</local-tx-datasource>

	<xa-datasource>
		<jndi-name>${datasourceJNDIName_relative_xa}</jndi-name>
		<xa-datasource-class>${databaseDriverName_xa}</xa-datasource-class>
		<xa-datasource-property name="URL">${databaseURL}</xa-datasource-property>

		<user-name>${databaseUserName}</user-name>
		<password>${databasePassword}</password>

		<!-- sql to call when connection is created
		<new-connection-sql>some arbitrary sql</new-connection-sql>
		-->
		<!-- sql to call on an existing pooled connection when it is obtained from pool -->
		<check-valid-connection-sql>SELECT 1 AS testfield</check-valid-connection-sql>

		<track-connection-by-tx>true</track-connection-by-tx>
<!-- Here in the default template, we cannot specify an exception-sorter. necessary?! I don't think so.
		<exception-sorter-class-name>org.jboss.resource.adapter.jdbc.vendor.MySQLExceptionSorter</exception-sorter-class-name>
-->
		<metadata>
			<type-mapping>${datasourceMetadataTypeMapping}</type-mapping>
		</metadata>
		<max-pool-size>200</max-pool-size>
		<min-pool-size>0</min-pool-size>
		<idle-timeout-minutes>1</idle-timeout-minutes>
	</xa-datasource>
</datasources>
